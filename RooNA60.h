/*****************************************************************************
 * Project: RooFit                                                           *
 *                                                                           *
 * This code was autogenerated by RooClassFactory                            *
 *****************************************************************************/

#ifndef RooNA60_h
#define RooNA60_h

#include "RooMath.h"
#include "TMath.h"
#include <RooAbsCategory.h>
#include <RooAbsPdf.h>
#include <RooAbsReal.h>
#include <RooCategoryProxy.h>
#include <RooRealProxy.h>

#include <complex>

class RooNA60 : public RooAbsPdf {
public:
  RooNA60() {}
  RooNA60(const char *name, const char *title, RooAbsReal &_m, RooAbsReal &_m0,
          RooAbsReal &_sigma, RooAbsReal &_alpha, RooAbsReal &_p1,
          RooAbsReal &_p2, RooAbsReal &_p3, RooAbsReal &_alpha2,
          RooAbsReal &_p12, RooAbsReal &_p22, RooAbsReal &_p32);
  RooNA60(RooNA60 const &other, const char *name = nullptr);
  TObject *clone(const char *newname) const override {
    return new RooNA60(*this, newname);
  }

protected:
  RooRealProxy m;
  RooRealProxy m0;
  RooRealProxy sigma;
  RooRealProxy alpha;
  RooRealProxy p1;
  RooRealProxy p2;
  RooRealProxy p3;
  RooRealProxy alpha2;
  RooRealProxy p12;
  RooRealProxy p22;
  RooRealProxy p32;

  double evaluate() const override;
  //void computeBatch(double *output, std::size_t size, RooFit::Detail::DataMap const &) const override;
  void doEval(RooFit::EvalContext &) const override;
  void translate(RooFit::Detail::CodeSquashContext &ctx) const override;

private:
  ClassDefOverride(RooNA60, 1) // Your description goes here...
};
inline double RooNA60_evaluate(double m, double m0, double sigma, double alpha,
                               double p1, double p2, double p3, double alpha2,
                               double p12, double p22, double p32) {
  Double_t t0 = 1;
  Double_t t = (m - m0) / sigma;

  if (t < alpha) {
    t0 = 1 + pow(p1 * (alpha - t), p2 - (p3 * sqrt(alpha - t)));
  } else if (t > alpha2) {
    t0 = 1 + pow(p12 * (t - alpha2), p22 - (p32 * sqrt(t - alpha2)));
  } else {
    t0 = 1;
  }
  return exp(-0.5 * pow(t / t0, 2));
}

#endif // RooNA60_h