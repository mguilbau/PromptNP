/*****************************************************************************
 * Project: RooFit                                                           *
 *                                                                           *
 * This code was autogenerated by RooClassFactory                            *
 *****************************************************************************/

// Your description goes here...

#include "RooBumpVWG.h"

#include <RooAbsReal.h>
#include <RooAbsCategory.h>

#include <Riostream.h>
#include <TMath.h>

#include <cmath>

ClassImp(RooBumpVWG);

RooBumpVWG::RooBumpVWG(const char *name, const char *title,
                        RooAbsReal& _x,
                        RooAbsReal& _A,
                        RooAbsReal& _B,
                        RooAbsReal& _C,
                        RooAbsReal& _cste,
                        RooAbsReal& _A1,
                        RooAbsReal& _B1,
                        RooAbsReal& _C1,
                        RooAbsReal& _cste1)
   : RooAbsPdf(name,title),
   x("x","x",this,_x),
   A("A","A",this,_A),
   B("B","B",this,_B),
   C("C","C",this,_C),
   cste("cste","cste",this,_cste),
   A1("A1","A1",this,_A1),
   B1("B1","B1",this,_B1),
   C1("C1","C1",this,_C1),
   cste1("cste1","cste1",this,_cste1)
{
}

RooBumpVWG::RooBumpVWG(RooBumpVWG const &other, const char *name)
   : RooAbsPdf(other,name),
   x("x",this,other.x),
   A("A",this,other.A),
   B("B",this,other.B),
   C("C",this,other.C),
   cste("cste",this,other.cste),
   A1("A1",this,other.A1),
   B1("B1",this,other.B1),
   C1("C1",this,other.C1),
   cste1("cste1",this,other.cste1)
{
}


double RooBumpVWG::evaluate() const 
{
   return RooBumpVWG_evaluate(x, A, B, C, cste, A1, B1, C1, cste1); 
}

void RooBumpVWG::doEval(RooFit::EvalContext &ctx) const 
{ 
   std::span<const double> xSpan = ctx.at(x);
   std::span<const double> ASpan = ctx.at(A);
   std::span<const double> BSpan = ctx.at(B);
   std::span<const double> CSpan = ctx.at(C);
   std::span<const double> csteSpan = ctx.at(cste);
   std::span<const double> A1Span = ctx.at(A1);
   std::span<const double> B1Span = ctx.at(B1);
   std::span<const double> C1Span = ctx.at(C1);
   std::span<const double> cste1Span = ctx.at(cste1);

   std::size_t n = ctx.output().size();
   for (std::size_t i = 0; i < n; ++i) {
      ctx.output()[i] = RooBumpVWG_evaluate(xSpan.size() > 1 ? xSpan[i] : xSpan[0],
                               ASpan.size() > 1 ? ASpan[i] : ASpan[0],
                               BSpan.size() > 1 ? BSpan[i] : BSpan[0],
                               CSpan.size() > 1 ? CSpan[i] : CSpan[0],
                               csteSpan.size() > 1 ? csteSpan[i] : csteSpan[0],
                               A1Span.size() > 1 ? A1Span[i] : A1Span[0],
                               B1Span.size() > 1 ? B1Span[i] : B1Span[0],
                               C1Span.size() > 1 ? C1Span[i] : C1Span[0],
                               cste1Span.size() > 1 ? cste1Span[i] : cste1Span[0]);
   }
} 
void RooBumpVWG::translate(RooFit::Detail::CodeSquashContext &ctx) const
{
   ctx.addResult(this, ctx.buildCall("RooBumpVWG_evaluate", x, A, B, C, cste, A1, B1, C1, cste1));
}
