/*****************************************************************************
 * Project: RooFit                                                           *
 *                                                                           *
 * This code was autogenerated by RooClassFactory                            *
 *****************************************************************************/

#ifndef RooBumpVWG_h
#define RooBumpVWG_h

#include <RooAbsPdf.h>
#include <RooRealProxy.h>
#include <RooCategoryProxy.h>
#include <RooAbsReal.h>
#include <RooAbsCategory.h>
#include <TMath.h>

#include <complex>

class RooBumpVWG : public RooAbsPdf {
public:
   RooBumpVWG() {}
   RooBumpVWG(const char *name, const char *title,        RooAbsReal& _x,
        RooAbsReal& _A,
        RooAbsReal& _B,
        RooAbsReal& _C,
        RooAbsReal& _cste,
        RooAbsReal& _A1,
        RooAbsReal& _B1,
        RooAbsReal& _C1,
        RooAbsReal& _cste1);
  RooBumpVWG(RooBumpVWG const &other, const char *name=nullptr);
  TObject* clone(const char *newname) const override { return new RooBumpVWG(*this, newname); }
protected:

  RooRealProxy x ;
  RooRealProxy A ;
  RooRealProxy B ;
  RooRealProxy C ;
  RooRealProxy cste ;
  RooRealProxy A1 ;
  RooRealProxy B1 ;
  RooRealProxy C1 ;
  RooRealProxy cste1 ;

  double evaluate() const override;
  void doEval(RooFit::EvalContext &) const override;
  void translate(RooFit::Detail::CodeSquashContext &ctx) const override;

private:

  ClassDefOverride(RooBumpVWG, 1) // Your description goes here...
};
inline double RooBumpVWG_evaluate(double x, double A, double B, double C, double cste, double A1, double B1, double C1, double cste1) 
{
  Double_t sigma = B + C * ((x - A) / A);
  Double_t sigma1 = B1 + C1 * ((x - A1) / A1);
  return (TMath::Exp(-(x - A) * (x - A)/(2. * sigma * sigma)) + cste) / (TMath::Exp(-(x - A1) * (x - A1)/(2. * sigma1 * sigma1)) + cste1);
}


#endif // RooBumpVWG_h