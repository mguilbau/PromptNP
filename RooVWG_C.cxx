/*****************************************************************************
 * Project: RooFit                                                           *
 *                                                                           *
 * This code was autogenerated by RooClassFactory                            *
 *****************************************************************************/

// Your description goes here...

#include "RooVWG_C.h"

#include <RooAbsReal.h>
#include <RooAbsCategory.h>

#include <Riostream.h>
#include <TMath.h>

#include <cmath>

ClassImp(RooVWG_C);

RooVWG_C::RooVWG_C(const char *name, const char *title,
                        RooAbsReal& _x,
                        RooAbsReal& _A,
                        RooAbsReal& _B,
                        RooAbsReal& _C,
                        RooAbsReal& _cste)
   : RooAbsPdf(name,title),
   x("x","x",this,_x),
   A("A","A",this,_A),
   B("B","B",this,_B),
   C("C","C",this,_C),
   cste("cste","cste",this,_cste)
{
}

RooVWG_C::RooVWG_C(RooVWG_C const &other, const char *name)
   : RooAbsPdf(other,name),
   x("x",this,other.x),
   A("A",this,other.A),
   B("B",this,other.B),
   C("C",this,other.C),
   cste("cste",this,other.cste)
{
}


double RooVWG_C::evaluate() const 
{
   return RooVWG_C_evaluate(x, A, B, C, cste); 
}

//void RooVWG::computeBatch(double *output, std::size_t size, RooFit::Detail::DataMap const &dataMap) const 
void RooVWG_C::doEval(RooFit::EvalContext &ctx) const
{ 
   /*std::span<const double> xSpan = dataMap.at(x);
   std::span<const double> ASpan = dataMap.at(A);
   std::span<const double> BSpan = dataMap.at(B);
   std::span<const double> CSpan = dataMap.at(C);*/

   std::span<const double> xSpan = ctx.at(x);
   std::span<const double> ASpan = ctx.at(A);
   std::span<const double> BSpan = ctx.at(B);
   std::span<const double> CSpan = ctx.at(C);
   std::span<const double> csteSpan = ctx.at(cste);

   std::size_t n = ctx.output().size();

   //for (std::size_t i = 0; i < size; ++i) {
   for (std::size_t i = 0; i < n; ++i) {
      //output[i] = RooVWG_evaluate(xSpan.size() > 1 ? xSpan[i] : xSpan[0],
      ctx.output()[i] = RooVWG_C_evaluate(xSpan.size() > 1 ? xSpan[i] : xSpan[0],
                               ASpan.size() > 1 ? ASpan[i] : ASpan[0],
                               BSpan.size() > 1 ? BSpan[i] : BSpan[0],
                               CSpan.size() > 1 ? CSpan[i] : CSpan[0],
                               csteSpan.size() > 1 ? csteSpan[i] : csteSpan[0]);
   }
} 
void RooVWG_C::translate(RooFit::Detail::CodeSquashContext &ctx) const
{
   ctx.addResult(this, ctx.buildCall("RooVWG_C_evaluate", x, A, B, C, cste));
}
