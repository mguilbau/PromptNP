/*****************************************************************************
 * Project: RooFit                                                           *
 *                                                                           *
 * This code was autogenerated by RooClassFactory                            *
 *****************************************************************************/

#ifndef RooExp_Affine_h
#define RooExp_Affine_h

#include "RooMath.h"
#include <TMath.h>
#include <RooAbsPdf.h>
#include <RooRealProxy.h>
#include <RooCategoryProxy.h>
#include <RooAbsReal.h>
#include <RooAbsCategory.h>

#include <complex>

class RooExp_Affine : public RooAbsPdf {
public:
   RooExp_Affine() {}
   RooExp_Affine(const char *name, const char *title,        RooAbsReal& _t,
        RooAbsReal& _tau,
        RooAbsReal& _c,
        RooAbsReal& _d);
  RooExp_Affine(RooExp_Affine const &other, const char *name=nullptr);
  TObject* clone(const char *newname) const override { return new RooExp_Affine(*this, newname); }
protected:

  RooRealProxy t ;
  RooRealProxy tau ;
  RooRealProxy c ;
  RooRealProxy d ;

  double evaluate() const override;
  void doEval(RooFit::EvalContext &) const override;
  void translate(RooFit::Detail::CodeSquashContext &ctx) const override;

private:

  ClassDefOverride(RooExp_Affine, 1) // Your description goes here...
};
inline double RooExp_Affine_evaluate(double t, double tau, double c, double d) 
{
  return TMath::Exp(-fabs(t)/tau) + c*t + d;
}


#endif // RooExp_Affine_h