/*****************************************************************************
 * Project: RooFit                                                           *
 *                                                                           *
 * This code was autogenerated by RooClassFactory                            *
 *****************************************************************************/

// Your description goes here...

#include "RooExp_Affine.h"

#include <RooAbsReal.h>
#include <RooAbsCategory.h>

#include <Riostream.h>
#include <TMath.h>

#include <cmath>

ClassImp(RooExp_Affine);

RooExp_Affine::RooExp_Affine(const char *name, const char *title,
                        RooAbsReal& _t,
                        RooAbsReal& _tau,
                        RooAbsReal& _c,
                        RooAbsReal& _d)
   : RooAbsPdf(name,title),
   t("t","t",this,_t),
   tau("tau","tau",this,_tau),
   c("c","c",this,_c),
   d("d","d",this,_d)
{
}

RooExp_Affine::RooExp_Affine(RooExp_Affine const &other, const char *name)
   : RooAbsPdf(other,name),
   t("t",this,other.t),
   tau("tau",this,other.tau),
   c("c",this,other.c),
   d("d",this,other.d)
{
}


double RooExp_Affine::evaluate() const 
{
   return RooExp_Affine_evaluate(t, tau, c, d); 
}

void RooExp_Affine::doEval(RooFit::EvalContext &ctx) const 
{ 
   std::span<const double> tSpan = ctx.at(t);
   std::span<const double> tauSpan = ctx.at(tau);
   std::span<const double> cSpan = ctx.at(c);
   std::span<const double> dSpan = ctx.at(d);

   std::size_t n = ctx.output().size();
   for (std::size_t i = 0; i < n; ++i) {
      ctx.output()[i] = RooExp_Affine_evaluate(tSpan.size() > 1 ? tSpan[i] : tSpan[0],
                               tauSpan.size() > 1 ? tauSpan[i] : tauSpan[0],
                               cSpan.size() > 1 ? cSpan[i] : cSpan[0],
                               dSpan.size() > 1 ? dSpan[i] : dSpan[0]);
   }
} 
void RooExp_Affine::translate(RooFit::Detail::CodeSquashContext &ctx) const
{
   ctx.addResult(this, ctx.buildCall("RooExp_Affine_evaluate", t, tau, c, d));
}
