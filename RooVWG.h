/*****************************************************************************
 * Project: RooFit                                                           *
 *                                                                           *
 * This code was autogenerated by RooClassFactory                            *
 *****************************************************************************/

#ifndef RooVWG_h
#define RooVWG_h

#include "RooMath.h"
#include "TMath.h"
#include <RooAbsPdf.h>
#include <RooRealProxy.h>
#include <RooCategoryProxy.h>
#include <RooAbsReal.h>
#include <RooAbsCategory.h>

#include <complex>

class RooVWG : public RooAbsPdf {
public:
   RooVWG() {}
   RooVWG(const char *name, const char *title,        RooAbsReal& _x,
        RooAbsReal& _A,
        RooAbsReal& _B,
        RooAbsReal& _C);
  RooVWG(RooVWG const &other, const char *name=nullptr);
  TObject* clone(const char *newname) const override { return new RooVWG(*this, newname); }
protected:

  RooRealProxy x ;
  RooRealProxy A ;
  RooRealProxy B ;
  RooRealProxy C ;

  double evaluate() const override;
  //void computeBatch(double* output, std::size_t size, RooFit::Detail::DataMap const&) const override;
  void doEval(RooFit::EvalContext &) const override;
  void translate(RooFit::Detail::CodeSquashContext &ctx) const override;

private:

  ClassDefOverride(RooVWG, 1) // Your description goes here...
};
inline double RooVWG_evaluate(double x, double A, double B, double C) 
{
  Double_t sigma = B + C * ((x - A) / A);
  return TMath::Exp(-(x - A) * (x - A)/(2. * sigma * sigma));
}


#endif // RooVWG_h